interface CustomElements
    extends Omit<HTMLElementTagNameMap, "title">,
        Omit<SVGElementTagNameMap, "script" | "a" | "style"> {
    fragment: DocumentFragment;
}

type CustomElementKeys = keyof CustomElements;

type CustomEventMap = keyof HTMLElementEventMap;

type CreatedElement<T extends CustomElementKeys> = CustomElements[T];

type CustomListener<T extends CustomElementKeys, K extends CustomEventMap> = (
    this: CreatedElement<T>,
    ev: HTMLElementEventMap[K]
) => any;

type CustomEvents<T extends CustomElementKeys> = {
    [key in CustomEventMap]:
        | CustomListener<T, key>
        | [CustomListener<T, key>, boolean | AddEventListenerOptions];
};

interface CustomAttributes<T extends CustomElementKeys> {
    class?: string;
    events: Partial<CustomEvents<T>>;
    dataset: { [key: string]: string | undefined };
    style: Partial<CSSStyleDeclaration> | { [key: string]: string };
}

type CustomElementAttributes<T extends CustomElementKeys> =
    | Partial<CreatedElement<T>>
    | Partial<CustomAttributes<T>>
    | { [key: string]: string };

declare function crtElt<T extends CustomElementKeys, U extends CreatedElement<T>>(nodeName: T, nullableAttributes: CustomElementAttributes<T> | null, ...children: Array<string | DocumentFragment | Element | undefined | null>): U;

export { crtElt as default };
