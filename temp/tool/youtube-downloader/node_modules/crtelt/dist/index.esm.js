const SVG_TAG_NAMES = [
    "animate",
    "animateMotion",
    "animateTransform",
    "circle",
    "clipPath",
    "defs",
    "desc",
    "ellipse",
    "feBlend",
    "feColorMatrix",
    "feComponentTransfer",
    "feComposite",
    "feConvolveMatrix",
    "feDiffuseLighting",
    "feDisplacementMap",
    "feDistantLight",
    "feDropShadow",
    "feFlood",
    "feFuncA",
    "feFuncB",
    "feFuncG",
    "feFuncR",
    "feGaussianBlur",
    "feImage",
    "feMerge",
    "feMergeNode",
    "feMorphology",
    "feOffset",
    "fePointLight",
    "feSpecularLighting",
    "feSpotLight",
    "feTile",
    "feTurbulence",
    "filter",
    "foreignObject",
    "g",
    "image",
    "line",
    "linearGradient",
    "marker",
    "mask",
    "metadata",
    "mpath",
    "path",
    "pattern",
    "polygon",
    "polyline",
    "radialGradient",
    "rect",
    "set",
    "stop",
    "svg",
    "switch",
    "symbol",
    "text",
    "textPath",
    "title",
    "tspan",
    "use",
    "view",
];
function createElement(nodeName) {
    if (nodeName === "fragment") {
        return document.createDocumentFragment();
    }
    if (SVG_TAG_NAMES.includes(nodeName)) {
        return document.createElementNS("http://www.w3.org/2000/svg", nodeName);
    }
    return document.createElement(nodeName);
}

function crtElt(nodeName, nullableAttributes, ...children) {
    const node = createElement(nodeName);
    const attributes = { ...nullableAttributes };
    children.forEach((childNode) => {
        if (!childNode) {
            return;
        }
        if (typeof childNode === "string") {
            node.appendChild(document.createTextNode(childNode));
            return;
        }
        node.appendChild(childNode);
    });
    if (node instanceof DocumentFragment) {
        return node;
    }
    Object.entries(attributes).forEach(([key, value]) => {
        if (typeof value === "undefined" || value === null) {
            return;
        }
        if (key === "events") {
            Object.entries(value).forEach(([type, args]) => {
                if (Array.isArray(args)) {
                    const curArgs = args;
                    node.addEventListener(type, ...curArgs);
                    return;
                }
                const curArgs = args;
                node.addEventListener(type, curArgs);
            });
            return;
        }
        if (key === "dataset") {
            Object.entries(value).forEach(([dataAttribute, dataValue]) => {
                if (!dataValue) {
                    return;
                }
                node.dataset[dataAttribute] = dataValue;
            });
            return;
        }
        if (key === "style") {
            Object.entries(value).forEach(([styleAttribute, styleValue]) => {
                if (styleAttribute in node.style) {
                    node.style[styleAttribute] = styleValue;
                    return;
                }
                node.style.setProperty(styleAttribute, styleValue);
            });
            return;
        }
        if (key === "class") {
            node.classList.add(...value.split(" "));
            return;
        }
        if (node instanceof SVGElement) {
            if (key === "className") {
                node.classList.add(...value.split(" "));
                return;
            }
            node.setAttribute(key, value);
            return;
        }
        if (key in node) {
            try {
                node[key] = value;
            }
            catch {
                node.setAttribute(key, value);
            }
            return;
        }
        node.setAttribute(key, value);
    });
    return node;
}

export { crtElt as default };
